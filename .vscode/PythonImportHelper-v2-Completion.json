[
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "quote",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "app.models",
        "description": "app.models",
        "isExtraImport": true,
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "settings",
        "importPath": "app.config",
        "description": "app.config",
        "isExtraImport": true,
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "status",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordRequestForm",
        "importPath": "fastapi.security.oauth2",
        "description": "fastapi.security.oauth2",
        "isExtraImport": true,
        "detail": "fastapi.security.oauth2",
        "documentation": {}
    },
    {
        "label": "BaseSettings",
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "isExtraImport": true,
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "CORSMiddleware",
        "importPath": "fastapi.middleware.cors",
        "description": "fastapi.middleware.cors",
        "isExtraImport": true,
        "detail": "fastapi.middleware.cors",
        "documentation": {}
    },
    {
        "label": "randrange",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "psycopg2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "psycopg2",
        "description": "psycopg2",
        "detail": "psycopg2",
        "documentation": {}
    },
    {
        "label": "RealDictCursor",
        "importPath": "psycopg2.extras",
        "description": "psycopg2.extras",
        "isExtraImport": true,
        "detail": "psycopg2.extras",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy.sql.expression",
        "description": "sqlalchemy.sql.expression",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.expression",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy.sql.sqltypes",
        "description": "sqlalchemy.sql.sqltypes",
        "isExtraImport": true,
        "detail": "sqlalchemy.sql.sqltypes",
        "documentation": {}
    },
    {
        "label": "JWTError",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "jwt",
        "importPath": "jose",
        "description": "jose",
        "isExtraImport": true,
        "detail": "jose",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "OAuth2PasswordBearer",
        "importPath": "fastapi.security",
        "description": "fastapi.security",
        "isExtraImport": true,
        "detail": "fastapi.security",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "EmailStr",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "conint",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "CryptContext",
        "importPath": "passlib.context",
        "description": "passlib.context",
        "isExtraImport": true,
        "detail": "passlib.context",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.142078936443_add_last_few_columns_to_posts_table",
        "description": "alembic.versions.142078936443_add_last_few_columns_to_posts_table",
        "peekOfCode": "def upgrade() -> None:\n    op.add_column('posts', sa.Column(\n        'published', sa.Boolean(), nullable=False, server_default='TRUE'\n    ),)\n    op.add_column('posts', sa.Column(\n        'created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('NOW()')\n    ),)\n    pass\ndef downgrade() -> None:\n    op.drop_column('posts', 'published')",
        "detail": "alembic.versions.142078936443_add_last_few_columns_to_posts_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.142078936443_add_last_few_columns_to_posts_table",
        "description": "alembic.versions.142078936443_add_last_few_columns_to_posts_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_column('posts', 'published')\n    op.drop_column('posts', 'created_at')\n    pass",
        "detail": "alembic.versions.142078936443_add_last_few_columns_to_posts_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.43aa14bcf9eb_add_foreign_key_to_post_table",
        "description": "alembic.versions.43aa14bcf9eb_add_foreign_key_to_post_table",
        "peekOfCode": "def upgrade() -> None:\n    op.add_column('posts', sa.Column('owner_id', sa.Integer(), nullable=False))\n    op.create_foreign_key('post_users_fk', source_table=\"posts\", referent_table=\"users\", local_cols=['owner_id'], remote_cols=['id'], ondelete=\"CASCADE\")\n    pass\ndef downgrade() -> None:\n    op.drop_constraint('post_users_fk', table_name=\"posts\")\n    op.drop_column('posts', 'owner_id')\n    pass",
        "detail": "alembic.versions.43aa14bcf9eb_add_foreign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.43aa14bcf9eb_add_foreign_key_to_post_table",
        "description": "alembic.versions.43aa14bcf9eb_add_foreign_key_to_post_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_constraint('post_users_fk', table_name=\"posts\")\n    op.drop_column('posts', 'owner_id')\n    pass",
        "detail": "alembic.versions.43aa14bcf9eb_add_foreign_key_to_post_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.5eebf42afb7a_auto_vote",
        "description": "alembic.versions.5eebf42afb7a_auto_vote",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('votes',\n    sa.Column('user_id', sa.Integer(), nullable=False),\n    sa.Column('post_id', sa.Integer(), nullable=False),\n    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], ondelete='CASCADE'),\n    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),\n    sa.PrimaryKeyConstraint('user_id', 'post_id')\n    )\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.5eebf42afb7a_auto_vote",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.5eebf42afb7a_auto_vote",
        "description": "alembic.versions.5eebf42afb7a_auto_vote",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('votes')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.5eebf42afb7a_auto_vote",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.627a32fd1976_add_content_column_to_post_table",
        "description": "alembic.versions.627a32fd1976_add_content_column_to_post_table",
        "peekOfCode": "def upgrade() -> None:\n    op.add_column('posts', sa.Column('content', sa.String(), nullable=False))\n    pass\ndef downgrade() -> None:\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "alembic.versions.627a32fd1976_add_content_column_to_post_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.627a32fd1976_add_content_column_to_post_table",
        "description": "alembic.versions.627a32fd1976_add_content_column_to_post_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_column('posts', 'content')\n    pass",
        "detail": "alembic.versions.627a32fd1976_add_content_column_to_post_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.8ab5aeb4fd37_add_phone_number",
        "description": "alembic.versions.8ab5aeb4fd37_add_phone_number",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('users', sa.Column('phone_number', sa.String(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'phone_number')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.8ab5aeb4fd37_add_phone_number",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.8ab5aeb4fd37_add_phone_number",
        "description": "alembic.versions.8ab5aeb4fd37_add_phone_number",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('users', 'phone_number')\n    # ### end Alembic commands ###",
        "detail": "alembic.versions.8ab5aeb4fd37_add_phone_number",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.b07374f70a08_add_user_table",
        "description": "alembic.versions.b07374f70a08_add_user_table",
        "peekOfCode": "def upgrade() -> None:\n    op.create_table(\n        'users',\n        sa.Column('id', sa.Integer, primary_key=True, nullable=False),\n        sa.Column('email', sa.String, nullable=False, unique=True),\n        sa.Column('password', sa.String, nullable=False),\n        sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False, server_default=sa.text('now()'))\n    )\n    pass\ndef downgrade() -> None:",
        "detail": "alembic.versions.b07374f70a08_add_user_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.b07374f70a08_add_user_table",
        "description": "alembic.versions.b07374f70a08_add_user_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_table('users')\n    pass",
        "detail": "alembic.versions.b07374f70a08_add_user_table",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": "alembic.versions.f977952a6911_create_post_table",
        "description": "alembic.versions.f977952a6911_create_post_table",
        "peekOfCode": "def upgrade() -> None:\n    op.create_table('posts', sa.Column('id', sa.Integer(), nullable=False, primary_key=True),sa.Column('title', sa.String(), nullable=False))\n    pass\ndef downgrade() -> None:\n    op.drop_table('posts')\n    pass",
        "detail": "alembic.versions.f977952a6911_create_post_table",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": "alembic.versions.f977952a6911_create_post_table",
        "description": "alembic.versions.f977952a6911_create_post_table",
        "peekOfCode": "def downgrade() -> None:\n    op.drop_table('posts')\n    pass",
        "detail": "alembic.versions.f977952a6911_create_post_table",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\"\"\"\n    context.configure(\n        url=sqlalchemy_url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )\n    with context.begin_transaction():\n        context.run_migrations()",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"Run migrations in 'online' mode.\"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        prefix=\"sqlalchemy.\",\n        poolclass=pool.NullPool,\n    )\n    with connectable.connect() as connection:\n        context.configure(\n            connection=connection, target_metadata=target_metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "config = context.config\n# URL-encode the password (this ensures special characters like % are handled properly)\nencoded_password = quote(settings.database_password)\n# Build the SQLAlchemy URL string with the encoded password\nsqlalchemy_url = f'postgresql+psycopg2://{settings.database_username}:{encoded_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\n# Ensure no interpolation occurs by directly setting the URL without using the .ini\nconfig.set_main_option(\"sqlalchemy.url\", sqlalchemy_url)\n# Set up logging if needed\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "encoded_password",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "encoded_password = quote(settings.database_password)\n# Build the SQLAlchemy URL string with the encoded password\nsqlalchemy_url = f'postgresql+psycopg2://{settings.database_username}:{encoded_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\n# Ensure no interpolation occurs by directly setting the URL without using the .ini\nconfig.set_main_option(\"sqlalchemy.url\", sqlalchemy_url)\n# Set up logging if needed\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# Set target metadata for autogenerate support\ntarget_metadata = Base.metadata",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "sqlalchemy_url",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "sqlalchemy_url = f'postgresql+psycopg2://{settings.database_username}:{encoded_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\n# Ensure no interpolation occurs by directly setting the URL without using the .ini\nconfig.set_main_option(\"sqlalchemy.url\", sqlalchemy_url)\n# Set up logging if needed\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\n# Set target metadata for autogenerate support\ntarget_metadata = Base.metadata\n# Migration functions\ndef run_migrations_offline() -> None:",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": "alembic.env",
        "description": "alembic.env",
        "peekOfCode": "target_metadata = Base.metadata\n# Migration functions\ndef run_migrations_offline() -> None:\n    \"\"\"Run migrations in 'offline' mode.\"\"\"\n    context.configure(\n        url=sqlalchemy_url,\n        target_metadata=target_metadata,\n        literal_binds=True,\n        dialect_opts={\"paramstyle\": \"named\"},\n    )",
        "detail": "alembic.env",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "def login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(\n        models.User.email == user_credentials.username).first()\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN, detail=f\"Invalid Credentials\")\n    if not utils.verify(user_credentials.password, user.password):\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN, detail=f\"Invalid Credentials\")\n    access_token = oauth2.create_access_token(data={\"user_id\": user.id})",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.auth",
        "description": "app.routers.auth",
        "peekOfCode": "router = APIRouter(tags=['Authentication'])\n@router.post('/login', response_model=schemas.Token)\ndef login(user_credentials: OAuth2PasswordRequestForm = Depends(), db: Session = Depends(database.get_db)):\n    user = db.query(models.User).filter(\n        models.User.email == user_credentials.username).first()\n    if not user:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN, detail=f\"Invalid Credentials\")\n    if not utils.verify(user_credentials.password, user.password):\n        raise HTTPException(",
        "detail": "app.routers.auth",
        "documentation": {}
    },
    {
        "label": "get_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get_posts(db: Session = Depends(get_db), user_id: int = Depends(oauth2.get_current_user), limit:int = 10, skip:int= 0, search: Optional[str] =\"\"):\n    # cursor.execute(\"\"\"SELECT * FROM  posts\"\"\")\n    # posts = cursor.fetchall()\n    posts = db.query(models.Post).filter(models.Post.title.contains(search)).limit(limit).offset(skip).all()\n    # results = db.query(models.Post, func.count(models.Vote.post_id).label(\"votes\")).join(models.Vote, models.Vote.post_id == models.Post.id, isouter=True).group_by(models.Post.id).all()\n    results = db.query(models.Post, func.count(models.Vote.post_id).label(\"votes\")).join(models.Vote, models.Vote.post_id == models.Post.id, isouter=True).group_by(models.Post.id).filter(models.Post.title.contains(search)).limit(limit).offset(skip).all()\n    # Convert results into a list of PostOut schemas\n    posts_with_votes = [\n        schemas.PostOut(\n            post=schemas.Post.from_orm(row[0]),  # Convert SQLAlchemy Post to Pydantic Post",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_posts",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def create_posts(post:schemas.PostCreate, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\" INSERT INTO posts (title, content, published) VALUES (%s, %s, %s) RETURNING * \"\"\", (post.title, post.content, post.published))\n    # new_post = cursor.fetchone()\n    # conn.commit()\n    new_post = models.Post(**post.dict())\n    db.add(new_post)\n    db.commit()\n    db.refresh(new_post)\n    return new_post\n@router.get(\"/{id}\", response_model=schemas.PostOut)",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "get_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def get_post(id: int, db: Session = Depends(get_db), user_id: int = Depends(oauth2.get_current_user)):\n    # Query for the post and count the votes for the specific post by its id\n    result = db.query(models.Post, func.count(models.Vote.post_id).label(\"votes\")) \\\n               .join(models.Vote, models.Vote.post_id == models.Post.id, isouter=True) \\\n               .group_by(models.Post.id) \\\n               .filter(models.Post.id == id) \\\n               .first()  # We expect only a single result here\n    if not result:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, \n                            detail=f\"Post with id: {id} not found\")",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "delete_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def delete_post(id:int, db: Session = Depends(get_db), current_user: int = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\" DELETE FROM posts WHERE id = %s RETURNING *\"\"\", (str(id)))\n    # deleted_post = cursor.fetchone()\n    # conn.commit()\n    post = db.query(models.Post).filter(models.Post.id == id)\n    if post.first() == None:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=f\"Post with id:{id} does not exist\")\n    post.delete(synchronize_session=False)\n    db.commit()\n    return Response(status_code=status.HTTP_204_NO_CONTENT)",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "update_post",
        "kind": 2,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "def update_post(id: int, updated_post:schemas.PostCreate, db: Session = Depends(get_db), user_id: int = Depends(oauth2.get_current_user)):\n    # cursor.execute(\"\"\" UPDATE posts SET title = %s, content = %s, published = %s  WHERE id = %s RETURNING * \"\"\", (post.title, post.content, post.published, str(id)))\n    # updated_post = cursor.fetchone()\n    # conn.commit()\n    post_query = db.query(models.Post).filter(models.Post.id == id)\n    post = post_query.first()\n    if post == None:\n        raise HTTPException(status_code=status.HTTP_400_BAD_REQUEST, detail=f\"Post with id:{id} does not exist\")\n    post_query.update(updated_post.dict(), synchronize_session=False)\n    db.commit()",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.post",
        "description": "app.routers.post",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/posts\",\n    tags=['Posts']\n)\n@router.get(\"/\", response_model=List[schemas.PostOut])\n# @router.get(\"/\")\ndef get_posts(db: Session = Depends(get_db), user_id: int = Depends(oauth2.get_current_user), limit:int = 10, skip:int= 0, search: Optional[str] =\"\"):\n    # cursor.execute(\"\"\"SELECT * FROM  posts\"\"\")\n    # posts = cursor.fetchall()\n    posts = db.query(models.Post).filter(models.Post.title.contains(search)).limit(limit).offset(skip).all()",
        "detail": "app.routers.post",
        "documentation": {}
    },
    {
        "label": "create_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def create_user(user:schemas.UserCreate , db: Session = Depends(get_db)):\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = models.User(**user.dict())\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n    return new_user\n@router.get('/{id}', response_model = schemas.UserOut)\ndef get_user(id:int, db: Session = Depends(get_db)):",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "get_user",
        "kind": 2,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "def get_user(id:int, db: Session = Depends(get_db)):\n    user = db.query(models.User).filter(models.User.id == id).first()\n    if not user:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"User with id: {id} does not exist\")\n    return user",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.user",
        "description": "app.routers.user",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/users\",\n    tags=['Users']\n)\n@router.post(\"/\", status_code = status.HTTP_201_CREATED, response_model=schemas.UserOut)\ndef create_user(user:schemas.UserCreate , db: Session = Depends(get_db)):\n    hashed_password = utils.hash(user.password)\n    user.password = hashed_password\n    new_user = models.User(**user.dict())\n    db.add(new_user)",
        "detail": "app.routers.user",
        "documentation": {}
    },
    {
        "label": "votes",
        "kind": 2,
        "importPath": "app.routers.vote",
        "description": "app.routers.vote",
        "peekOfCode": "def votes(vote: schemas.Vote, db: Session = Depends(database.get_db), current_user: int = Depends(oauth2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post with id: {vote.post_id} does not exits\")\n    votes_query = db.query(models.Votes).filter(models.Votes.post_id == vote.post_id, models.Votes.user_id == current_user.id)\n    found_vote = votes_query.first()\n    if(vote.dir == 1):\n        if found_vote:\n            raise HTTPException(status_code=status.HTTP_409_CONFLICT, detail=f\"user {current_user.id} has already votes on post {vote.post_id}\")\n        new_vote = models.Votes(post_id = vote.post_id, user_id = current_user.id)",
        "detail": "app.routers.vote",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.vote",
        "description": "app.routers.vote",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/vote\",\n    tags=['Vote']\n)\n@router.post(\"/\", status_code=status.HTTP_201_CREATED)\ndef votes(vote: schemas.Vote, db: Session = Depends(database.get_db), current_user: int = Depends(oauth2.get_current_user)):\n    post = db.query(models.Post).filter(models.Post.id == vote.post_id).first()\n    if not post:\n        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail=f\"Post with id: {vote.post_id} does not exits\")\n    votes_query = db.query(models.Votes).filter(models.Votes.post_id == vote.post_id, models.Votes.user_id == current_user.id)",
        "detail": "app.routers.vote",
        "documentation": {}
    },
    {
        "label": "Settings",
        "kind": 6,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "class Settings(BaseSettings):\n    database_hostname: str\n    database_port: str\n    database_password: str\n    database_name:str\n    database_username: str\n    secret_key: str\n    algorithm: str\n    access_token_expire_minutes: int\n    class Config:",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "settings",
        "kind": 5,
        "importPath": "app.config",
        "description": "app.config",
        "peekOfCode": "settings = Settings()",
        "detail": "app.config",
        "documentation": {}
    },
    {
        "label": "get_db",
        "kind": 2,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "def get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "encoded_password",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "encoded_password = quote(settings.database_password)\n# Construct the SQLAlchemy database URL using the encoded password\nSQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{encoded_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SQLALCHEMY_DATABASE_URL",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SQLALCHEMY_DATABASE_URL = f'postgresql://{settings.database_username}:{encoded_password}@{settings.database_hostname}:{settings.database_port}/{settings.database_name}'\nengine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine(SQLALCHEMY_DATABASE_URL)\nSessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)\nBase = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\ndef get_db():\n    db = SessionLocal()\n    try:\n        yield db\n    finally:\n        db.close()",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "root",
        "kind": 2,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "def root():\n    return {\"message\": \"Welcome to my api!\"}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\norigins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nwhile True:",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "origins",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "origins = [\"*\"]\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=origins,\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\nwhile True:\n    try:",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Post(Base):\n    __tablename__ = \"posts\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    title = Column(String, nullable=False)\n    content = Column(String, nullable=False)\n    published = Column(Boolean, server_default='TRUE', nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    owner_id = Column(Integer, ForeignKey(\"users.id\", ondelete='CASCADE'), nullable=False)\nclass User(Base):\n    __tablename__ = \"users\"",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = \"users\"\n    id = Column(Integer, primary_key=True, nullable=False)\n    email = Column(String, nullable=False, unique=True)\n    password = Column(String, nullable=False)\n    created_at = Column(TIMESTAMP(timezone=True), nullable=False, server_default=text('now()'))\n    phone_number = Column(String)\nclass Vote(Base):\n    __tablename__ = \"votes\"\n    user_id = Column(Integer, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Vote(Base):\n    __tablename__ = \"votes\"\n    user_id = Column(Integer, ForeignKey(\"users.id\", ondelete=\"CASCADE\"), primary_key=True)\n    post_id = Column(Integer, ForeignKey(\"posts.id\", ondelete=\"CASCADE\"), primary_key=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "create_access_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n# def verify_access_toker(token: str, createndials_exception):\n#     try:\n#         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n#         id: str = payload.get(\"user_id\")",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "verify_access_token",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def verify_access_token(token: str, credentials_exception):\n    try:\n        # Decode the JWT token\n        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])\n        # Retrieve the user_id from the token's payload (assuming it's an integer)\n        id: int = payload.get(\"user_id\")  # Use `int` if the ID is an integer in the database\n        if id is None:\n            raise credentials_exception\n        # Pass the user_id to TokenData (either as string or integer based on your schema)\n        token_data = schemas.TokenData(id=id)  # If TokenData expects an int, use int here",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "get_current_user",
        "kind": 2,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "def get_current_user(token: str = Depends(oauth2_scheme), db: Session = Depends(database.get_db)):\n    credentials_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail=f\"Could not valudate credentials\", headers={\"WWW-Authenticate\":\"Bearer\"})\n    token = verify_access_token(token, credentials_exception)\n    user = db.query(models.User).filter(models.User.id == token.id).first()\n    return user",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "oauth2_scheme",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "oauth2_scheme = OAuth2PasswordBearer(tokenUrl='login ')\n#SECRET_KEY\n#Algorithm\n#Expireation time\nSECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "SECRET_KEY = settings.secret_key\nALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n# def verify_access_toker(token: str, createndials_exception):",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ALGORITHM",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ALGORITHM = settings.algorithm\nACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n# def verify_access_toker(token: str, createndials_exception):\n#     try:",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "ACCESS_TOKEN_EXPIRE_MINUTES",
        "kind": 5,
        "importPath": "app.oauth2",
        "description": "app.oauth2",
        "peekOfCode": "ACCESS_TOKEN_EXPIRE_MINUTES = settings.access_token_expire_minutes\ndef create_access_token(data: dict):\n    to_encode = data.copy()\n    expire = datetime.utcnow() + timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n    to_encode.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)\n    return encoded_jwt\n# def verify_access_toker(token: str, createndials_exception):\n#     try:\n#         payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])",
        "detail": "app.oauth2",
        "documentation": {}
    },
    {
        "label": "PostBase",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostBase(BaseModel):\n    title: str\n    content: str\n    published: bool = True\nclass PostCreate(PostBase):\n    owner_id: int\nclass Post(PostBase):\n    id: int\n    created_at: datetime\n    owner_id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostCreate(PostBase):\n    owner_id: int\nclass Post(PostBase):\n    id: int\n    created_at: datetime\n    owner_id: int\n    class Config:\n        orm_mode = True\n        from_attributes = True \nclass PostOut(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Post(PostBase):\n    id: int\n    created_at: datetime\n    owner_id: int\n    class Config:\n        orm_mode = True\n        from_attributes = True \nclass PostOut(BaseModel):\n    post: Post\n    votes: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "PostOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class PostOut(BaseModel):\n    post: Post\n    votes: int\n    class Config:\n        orm_mode = True\nclass UserCreate(BaseModel):\n    email: EmailStr\n    password: str\nclass UserOut(BaseModel):\n    id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserCreate",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserCreate(BaseModel):\n    email: EmailStr\n    password: str\nclass UserOut(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass UserLogin(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserOut",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserOut(BaseModel):\n    id: int\n    email: EmailStr\n    created_at: datetime\n    class Config:\n        orm_mode = True\nclass UserLogin(BaseModel):\n    email: EmailStr\n    password: str\nclass Token(BaseModel):",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "UserLogin",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class UserLogin(BaseModel):\n    email: EmailStr\n    password: str\nclass Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: int\nclass Vote(BaseModel):\n    post_id: int",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Token",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Token(BaseModel):\n    access_token: str\n    token_type: str\nclass TokenData(BaseModel):\n    id: int\nclass Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1) # type: ignore",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "TokenData",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class TokenData(BaseModel):\n    id: int\nclass Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1) # type: ignore",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "Vote",
        "kind": 6,
        "importPath": "app.schemas",
        "description": "app.schemas",
        "peekOfCode": "class Vote(BaseModel):\n    post_id: int\n    dir: conint(le=1) # type: ignore",
        "detail": "app.schemas",
        "documentation": {}
    },
    {
        "label": "hash",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "verify",
        "kind": 2,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "def verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    },
    {
        "label": "pwd_context",
        "kind": 5,
        "importPath": "app.utils",
        "description": "app.utils",
        "peekOfCode": "pwd_context = CryptContext(schemes=[\"bcrypt\"], deprecated=\"auto\")\ndef hash(password: str):\n    return pwd_context.hash(password)\ndef verify(plain_password, hashed_password):\n    return pwd_context.verify(plain_password, hashed_password)",
        "detail": "app.utils",
        "documentation": {}
    }
]